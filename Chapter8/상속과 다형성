8. 상속과 다형성

 * 상속
  클래스를 정의할 때 이미 구현된 클래서를 상속받아서 속성이나 기능이 확장되는 클래스를 구현함.
  하위 클래스는 상위 클래스보다 구체적인 의미를 가짐.
  장점 : 유지보수가 용이함.
   ex. 상위클래스 = 포유류, 하위클래스 = 사람 
       => 사람은 포유류의 기능을 상속받으면서 추가적인 기능을 가짐
       
  기능을 가져다 쓰면서 좀더 구체적인 기능을 가진 클래스를 만들때 상속을 사용함.
  
 * 상속 사용 방법
  class A extends B
  (A = 하위클래스, B = 상위클래스)
  extends 뒤에는 단 하나의 class만 사용 가능. 
  
   <상속에서 클래스 생성 과정>
  하위 클래스가 생성 될 때 상위 클래스가 먼저 생성 됨.
  상위 클래스의 생성자가 호출되고 하위 클래스 생성자가 호출됨.
  하위 클래스 생성자에서는 무조건 상위 클래스 생성자가호출되어야함.
  아무것도 없는 경우 기본 생성자를 호출하기 위해 super()를 코드에 넣어줌.
  super() 생성자는 상위 클래스의 기본 생성자임.
  만약 상위클래스의 기본생성자가 없는 경우(매개변수가 있는 생성자만 존재할경우) 하위 클래스는 명시적으로 상위클래스 호출해야함.
  
 * super 예약어
  this = 자기 인스턴스의 주소 가짐
  super = 하위 클래스가 상위 클래스에 대한 주소 가짐
   => 하위 클래스가 상위 클래스에 접근할 때 사용.
    
 * 상위 클래스로의 묵시적 형 변환(업캐스팅)
  상위 클래스형으로 변수 선언하고 하위 클래스 인스턴스를 생성할 수 있음.
  하위 클래스는 상위 클래스의 타입 포함하므로 상위 클래스로 묵시적 형변환이 가능함.
  업캐스팅시 접근가능한 변수나 메서드는 상위 클래스의 것임.
   
 * 메서드 오버라이딩
  상위 클래스에서 정의된 메서드 중 하위 클래스와 기능이 맞지않거나 추가 기능이 필요한 경우 같은 이름과 매개변수로 하위 클래스에서 재정의함.
  
 * 가상 메서드
  타입에 상관없이 실제 생성된 인스턴스의 메서드가 호출 되는 원리.
   ex. A aa = new B();
   재정의된 메서드가 있을때 aa의 타입은 A이지만 생성된 인스턴스인 B클래스의 메서드가 호출되는것.
   
  - data 영역과 code 영역.
   : 코드 영역은 명령어의 집합임. 명령어는 변하지 않음.
     데이터 영역은 변수가 저장됨. 변수는 값이 변함.
     재정의시 코드의 매서드 영역이 따로 추가되어 잡힘.
     재정의하면 타입이 아닌 인스턴스의 메서드를 부름
     
 
 * 다형성
  하나의 코드가 여러가지 자료형으로 구현되어 실행되는것.(코드 한 줄이 다양한 구현을 하는것)
  정보은닉, 상속과 더불어 객체지향의 큰 특징 중 하나.
  객체지향 프로그래밍의 유연성, 재활용성, 유지보수성에 큰 역할을 함.
  
 * 다형성 구현
  하나의 클래스를 상속받은 여러 클래스가 있는 경우 각 클래스마다 같은 이름의 서로 다른 메서드를 재정의함.
  상위 클래스 타입으로 선언된 하나의 변수가 여러 인스턴스에 대입되어 다양한 구현이 실행될 수 있음.
  
  
  
  
  